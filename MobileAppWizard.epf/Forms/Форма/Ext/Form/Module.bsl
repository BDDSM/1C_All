// Функция используется для проверки заполнения реквизитов формы.
// Невозможность использования штатной механики проверки заполнения обусловлена тем,
// что проверка существования файлов должна выполняться на клиентской стороне, а не
// на серверной.
// Параметры:
//	Данные - массив структур, содержащий информацию о проверяемых данных:
//		Ключ - имя проверяемого реквизита
//		Значение - значение проверяемого реквизита
//		Реквизит - для какого реквизита формы будет выводиться ошибка (для возврата)
//	Результат проверки - массив структур, содержащих тексты ошибок, если таковые
// 			возникли в результате проверки:
//		Текст - текст сообщения об ошибке
//		Реквизит - к какому реквизиту формы выполнять привязку сообщения об ошибке
//				(используется значение, переданное в Данные[].Реквизит
// Возвращаемое значение:
//	Истина - есть ошибки, РезультатПроверки содержит массив текстов ошибок
//	Ложь - ошибок нет
&НаКлиенте
Функция ПроверитьКорректностьРеквизитов(Данные, РезультатПроверки) Экспорт
	
	ЕстьОшибки = Ложь;
	РезультатПроверки = Новый Массив;
	Для каждого Данное Из Данные Цикл
		Если Данное.Ключ = "ПарольКлюча" Тогда
			Если СтрДлина(Данное.Значение) < 6 Тогда
				РезультатПроверки.Добавить(Новый Структура("Текст, Реквизит", НСтр("ru='Пароль не может быть меньше 6 символов';en='The password must be at least 6 characters long'", "ru"), Данное.Реквизит));
				ЕстьОшибки = Истина;
			КонецЕсли;
			ЕстьЦифра = Ложь;
			Для Цифра=0 По 9 Цикл
				Если Найти(Данное.Значение, Строка(Цифра)) > 0 Тогда
					ЕстьЦифра = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЕстьЦифра Тогда
				РезультатПроверки.Добавить(Новый Структура("Текст, Реквизит", НСтр("ru='Пароль должен содержать цифры';en='Password must contain at least one digit'", "ru"), Данное.Реквизит));
				ЕстьОшибки = Истина;
			КонецЕсли;
		ИначеЕсли Данное.Ключ = "ПсевдонимКлюча" Тогда
			Если СтрДлина(Данное.Значение) < 2 Тогда
				РезультатПроверки.Добавить(Новый Структура("Текст, Реквизит", НСтр("ru='Псевдоним не может быть меньше 2 символов';en='The alias must be at least 2 characters long'", "ru"), Данное.Реквизит));
				ЕстьОшибки = Истина;
			КонецЕсли;
		ИначеЕсли Данное.Ключ = "ФайлКлюча" Тогда
			Если ПустаяСтрока(Данное.Значение) Тогда
				РезультатПроверки.Добавить(Новый Структура("Текст, Реквизит", НСтр("ru='Имя файла ключа не указано';en='Key file not specified'", "ru"), Данное.Реквизит));
				ЕстьОшибки = Истина;
			КонецЕсли;
		ИначеЕсли Данное.Ключ = "Файл" Тогда
			Если НЕ ФайлСуществует(Данное.Значение) Тогда
				РезультатПроверки.Добавить(Новый Структура("Текст, Реквизит", НСтр("ru='Отсутствует файл: ';en='File not found: '", "ru") + Данное.Значение, Данное.Реквизит));
				ЕстьОшибки = Истина;
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(Данное.Значение) Тогда
				РезультатПроверки.Добавить(Новый Структура("Текст, Реквизит", НСтр("ru='Не указано значение реквизита: ';en='Value not specified for the property: '", "ru") + Данное.Ключ, Данное.Реквизит));
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	МетаПуть = ОбъектОбработки.Метаданные().ПолноеИмя();
	
	Элементы.ВариантыПоставки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ОднаКонфигурация = Истина;
	КодЛокализации = Лев(ТекущийКодЛокализации(), 2);
	Объект.ЯзыкПоУмолчанию = КодЛокализации;
	
	// Определим, где живет файл настроек:
	// 1. если она внешняя - файл конфигурации лежит "рядом"
	// 2. если она встроена в конфигурацию - файл настроек живет в каталоге документов пользователя
	// При этом имя файла всегда фиксированное: MobileAppWizard.cfg
	Попытка
		ФайлОбработки = Новый Файл(ОбъектОбработки.ИспользуемоеИмяФайла);
		КаталогОбработки = ФайлОбработки.Путь;
	Исключение
		 // Заполним это имя потом, т.к. нам нужен клиентский каталог, а здесь мы на сервере
		КаталогОбработки = "";
	КонецПопытки;
	Объект.СоздаватьДляAndroid = Истина;
	Объект.СоздаватьДляiOS = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиНаКлиенте(ФайлНастроек)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлНастроек, "utf-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("SettingsRoot");

	// Общие настройки
	ЗаписатьXML(ЗаписьXML, Объект.ИдентификаторПриложения, "UniqueName");
	ЗаписатьXML(ЗаписьXML, Объект.ВерсияПриложения, "ApplicationVersion");
	ЗаписатьXML(ЗаписьXML, Объект.СборкаПриложения, "BuildNumber");
	ЗаписатьXML(ЗаписьXML, Объект.МобильнаяПлатформа, "MobilePlatform");
	ЗаписатьXML(ЗаписьXML, Объект.JavaSDK, "JavaSDK");
	ЗаписатьXML(ЗаписьXML, Объект.ЯзыкПоУмолчанию, "defaultLanguage");
	
	ЗаписатьXML(ЗаписьXML, Объект.СоздаватьДляAndroid, "CreateForAndroid");
	ЗаписатьXML(ЗаписьXML, Объект.РезультатДляAndroid, "DestinationForAndroid");
	ЗаписатьXML(ЗаписьXML, Объект.AndroidSDK, "AndroidSDK");
	
	ЗаписатьXML(ЗаписьXML, Объект.СоздаватьДляiOS , "CreateForiOS");
	ЗаписатьXML(ЗаписьXML, Объект.РезультатДляiOS, "DestinationForiOS");
	
	ЗаписатьXML(ЗаписьXML, Объект.ФайлКлюча, "KeyFile");
	ЗаписатьXML(ЗаписьXML, Объект.ПарольКлюча, "KeyPassword");
	ЗаписатьXML(ЗаписьXML, Объект.ПсевдонимКлюча, "KeyAlias");
	
	// иконки и логотипы для Андроида
	Иконки = ПолучитьСписокКартинок("AndroidIcon");
	Для каждого Иконка Из Иконки Цикл
		ЗаписатьXML(ЗаписьXML, Иконка.Значение, Иконка.Имя);
	КонецЦикла;
	Логотипы = ПолучитьСписокКартинок("AndroidLogo");
	Для каждого Лого Из Логотипы Цикл
		ЗаписатьXML(ЗаписьXML, Лого.Значение, Лого.Имя);
	КонецЦикла;
	
	// иконки и логотипы для iOS
	Иконки = ПолучитьСписокКартинок("iOSIcon");
	Для каждого Иконка Из Иконки Цикл
		ЗаписатьXML(ЗаписьXML, Иконка.Значение, Иконка.Имя);
	КонецЦикла;
	Логотипы = ПолучитьСписокКартинок("iOSLogo");
	Для каждого Лого Из Логотипы Цикл
		ЗаписатьXML(ЗаписьXML, Лого.Значение, Лого.Имя);
	КонецЦикла;
	
	// данные конфигураций
	Для каждого Конфигурация Из Объект.Конфигурации Цикл
		ЗаписатьXML(ЗаписьXML, Конфигурация.Путь, "Configuration");
	КонецЦикла;
	
	// представления конфигураций
	Для каждого Представление Из ПредставленияПриложения Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("ApplicationName");
		ЗаписьXML.ЗаписатьАтрибут("lang", XMLСтрока(Представление.КодЯзыка));
		ЗаписьXML.ЗаписатьАтрибут("presentation", XMLСтрока(Представление.Представление));
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// завершим запись
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьНастройкиНаКлиенте(ИмяФайла)
	
	КартаСоответствия = Новый Соответствие; // Ключ - в файле, Значение - в объекте
	КартаСоответствия.Вставить("UniqueName", "ИдентификаторПриложения");
	КартаСоответствия.Вставить("ApplicationVersion", "ВерсияПриложения");
	КартаСоответствия.Вставить("BuildNumber", "СборкаПриложения");
	КартаСоответствия.Вставить("MobilePlatform", "МобильнаяПлатформа");
	КартаСоответствия.Вставить("JavaSDK", "JavaSDK");
	КартаСоответствия.Вставить("defaultLanguage", "ЯзыкПоУмолчанию");
	
	КартаСоответствия.Вставить("CreateForAndroid", "СоздаватьДляAndroid");
	КартаСоответствия.Вставить("DestinationForAndroid", "РезультатДляAndroid");
	КартаСоответствия.Вставить("AndroidSDK", "AndroidSDK");
	
	КартаСоответствия.Вставить("CreateForiOS", "СоздаватьДляiOS");
	КартаСоответствия.Вставить("DestinationForiOS", "РезультатДляiOS");
	
	КартаСоответствия.Вставить("KeyFile", "ФайлКлюча");
	КартаСоответствия.Вставить("KeyPassword", "ПарольКлюча");
	КартаСоответствия.Вставить("KeyAlias", "ПсевдонимКлюча");
	
	Объект.Конфигурации.Очистить();
	ПредставленияПриложения.Очистить();

	Читатель = Новый ЧтениеXML();
	Читатель.ОткрытьФайл(ИмяФайла);
	Построитель = Новый ПостроительDOM();
	Попытка
		Документ = Построитель.Прочитать(Читатель);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	// начнем чтение
	Настройки = Документ.ПолучитьЭлементыПоИмени("SettingsRoot");
	Если Настройки.Количество() = 0 Тогда
		Сообщить(НСтр("ru='В загружаемом файле отсутствует элемент <SettingsRoot>. Данный файл не является файлом настройки инструмента формирования поставки для мобильной платформы.';en=""<SettingsRoot> element not found in the specified file. This file doesn't contain settings for a mobile platform distribution package generation tool.""", "ru"));
		Возврат Ложь;
	КонецЕсли;
	Для каждого Элемент Из КартаСоответствия Цикл
	    ЭлементыНастройки = Документ.ПолучитьЭлементыПоИмени(Элемент.Ключ);
		Если ЭлементыНастройки.Количество() > 0 Тогда
			Объект[Элемент.Значение] = ЭлементыНастройки[0].ТекстовоеСодержимое;
		КонецЕсли;
	КонецЦикла;
	// теперь прочитаем иконки и логотипы
	Список = Новый Массив;
	Список.Добавить("AndroidIcon");
	Список.Добавить("AndroidLogo");
	Список.Добавить("iOSIcon");
	Список.Добавить("iOSLogo");
	Для каждого Вид Из Список Цикл
		СписокРеквизитов = ПолучитьСписокКартинок(Вид);
		Для каждого Элемент Из СписокРеквизитов Цикл
		    ЭлементыНастройки = Документ.ПолучитьЭлементыПоИмени(Элемент.Имя);
			Если ЭлементыНастройки.Количество() > 0 Тогда
				Объект[Элемент.Имя] = ЭлементыНастройки[0].ТекстовоеСодержимое;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// прочитаем список конфигураций
    Конфигурации = Документ.ПолучитьЭлементыПоИмени("Configuration");
	Для каждого Конфигурация Из Конфигурации Цикл
		ДобавитьКонфигурацию(Конфигурация.ТекстовоеСодержимое);
	КонецЦикла;
	// прочитаем список представлений и загрузим его
    Представления = Документ.ПолучитьЭлементыПоИмени("ApplicationName");
	Для каждого Представление Из Представления Цикл
		УстановитьПредставлениеПриложенияПоКодуЛокализации(Представление.ПолучитьАтрибут("lang"), Представление.ПолучитьАтрибут("presentation"));
	КонецЦикла;
	// сформировать список выбора для языка по умолчанию
	ЗаполнитьСписокВыбораЯзыкаПоУмолчанию();
	//Объект.ЯзыкПоУмолчанию = КодЛокализации;
	Читатель.Закрыть();
	
	Объект.ПредставлениеПриложения = ПолучитьПредставлениеПриложенияПоКодуЛокализации(Объект.ЯзыкПоУмолчанию);
	ТекущийФайлНастроек = ИмяФайла;
	// Определим режим работы - одна или несколько конфигураций
	Если Объект.Конфигурации.Количество() <= 1 Тогда
		ОднаКонфигурация = Истина;
		Элементы.ВариантыПоставки.ТекущаяСтраница = Элементы.ОднаКонфигурация;
	Иначе
		ОднаКонфигурация = Ложь;
		Элементы.ВариантыПоставки.ТекущаяСтраница = Элементы.МногоКонфигураций;
	КонецЕсли;
	
КонецФункции

// Формирует массивы структур для пиктограмм (иконок) и логотипов
// Каждый массив содержит элемент из трех свойств:
//	Имя - идентификатор данных
//	Представление - представление данных
//	Значение - сами данные
&НаСервере
Функция ПолучитьСписокКартинок(ПрефиксРеквизита)
	
	Результат = Новый Массив;
	МетаОбработка = РеквизитФормыВЗначение("Объект").Метаданные();
	Для каждого Реквизит Из МетаОбработка.Реквизиты Цикл
		Если Найти(Реквизит.Имя, ПрефиксРеквизита) = 1 Тогда
			Элемент = Новый Структура("Имя, Представление, Значение");
			Элемент.Имя = Реквизит.Имя;
			Элемент.Представление = Реквизит.Представление();
			Элемент.Значение = Объект[Реквизит.Имя];
			Результат.Добавить(Элемент);
		КонецЕсли;	
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Функция проверяет существование файла
&НаКлиенте
Функция ФайлСуществует(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
	
КонецФункции

&НаКлиенте
Функция УстановитьПредставлениеКонфигурацийПоКодуЛокализации(Код)
	
	Для каждого Конфигурация Из ПредставленияКонфгураций Цикл
		Конфа = Объект.Конфигурации.НайтиСтроки(Новый Структура("Путь", Конфигурация.Конфигурация));
		Результат = Конфигурация.Представления.НайтиСтроки(Новый Структура("КодЯзыка", Код));
		Если Результат.Количество() = 0 Тогда
			Конфа[0].Наименование = НСтр("ru='<Выбранный язык по умолчанию не задан в данной конфигурации>';en='<Selected default language not found in the configuration>'", "ru");
		Иначе
			Конфа[0].Наименование = Результат[0].Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеПриложенияПоКодуЛокализации(Код)
	
	Результат = ПредставленияПриложения.НайтиСтроки(Новый Структура("КодЯзыка", Код));
	Если Результат.Количество() = 0 Тогда
		Возврат "";
	Иначе
		Возврат Результат[0].Представление;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПредставлениеПриложенияПоКодуЛокализации(Код, Представление)
	
	Результат = ПредставленияПриложения.НайтиСтроки(Новый Структура("КодЯзыка", Код));
	Если Результат.Количество() Тогда
		Результат[0].Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораЯзыкаПоУмолчанию()
	
	СписокВыбора = Элементы.ЯзыкПоУмолчанию.СписокВыбора;
	СписокВыбора.Очистить();
	Для каждого Представление Из ПредставленияПриложения Цикл
		СписокВыбора.Добавить(Представление.КодЯзыка, Представление.ПредставлениеЯзыка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКартинку(КартинкаВНайстроках, ЦелевойПуть)

	Если НЕ ПустаяСтрока(КартинкаВНайстроках) Тогда
		Попытка
			КопироватьФайл(КартинкаВНайстроках, ЦелевойПуть);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИмяАндроид(КаталогРесурсов, ИмяФайла, КодЯзыка, Представление)
	
	КаталогРесурсовПоУмолчанию = КаталогРесурсов + "values\";
	КаталогРесурсовЯзыка = КаталогРесурсов + "values-" + СокрЛП(КодЯзыка) + "\";
	ИмяРесурсовПоУмолчанию = КаталогРесурсовПоУмолчанию + ИмяФайла;
	ИмяРесурсовЯзыка = КаталогРесурсовЯзыка + ИмяФайла;
	ИмяРабочегоФайла = "";
	Если КодЯзыка = "default" Тогда
		Если НЕ ФайлСуществует(КаталогРесурсовПоУмолчанию+"aux") Тогда
			ВызватьИсключение НСтр("ru='Платформа не содержит каталог ресурсов по умолчанию';en='Platform does not contain default resource directory'", "ru");
		КонецЕсли;
		Если ФайлСуществует(ИмяРесурсовПоУмолчанию) Тогда
			УдалитьФайлы(ИмяРесурсовПоУмолчанию);
		КонецЕсли;
		ИмяРабочегоФайла = ИмяРесурсовПоУмолчанию;
	Иначе
		Если НЕ ФайлСуществует(КаталогРесурсовЯзыка+"aux") Тогда
			СоздатьКаталог(КаталогРесурсовЯзыка);
		КонецЕсли;
		Если ФайлСуществует(ИмяРесурсовЯзыка) Тогда
			УдалитьФайлы(ИмяРесурсовЯзыка);
		КонецЕсли;
		ИмяРабочегоФайла = ИмяРесурсовЯзыка;
	КонецЕсли;
	
	Писатель = Новый ЗаписьXML;
	Писатель.ОткрытьФайл(ИмяРабочегоФайла, "utf-8");
	Писатель.ЗаписатьОбъявлениеXML();
	Писатель.ЗаписатьНачалоЭлемента("resources");
	Писатель.ЗаписатьНачалоЭлемента("string");
	Писатель.ЗаписатьАтрибут("name", XMLСтрока("app_name"));
	Писатель.ЗаписатьТекст(XMLСтрока(Представление));
	Писатель.ЗаписатьКонецЭлемента();
	Писатель.ЗаписатьКонецЭлемента();
	Писатель.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИмяИОС(КаталогРесурсов, ИмяФайла, КодЯзыка, Представление)
	
	// проверим существование каталога
	КаталогРесурсовЯзыка = КаталогРесурсов + СокрЛП(КодЯзыка) + ".lproj";
	ИмяРесурсовЯзыка = КаталогРесурсовЯзыка + "\" + ИмяФайла;
	Если НЕ ФайлСуществует(КаталогРесурсовЯзыка+"aux") Тогда
		СоздатьКаталог(КаталогРесурсовЯзыка);
	КонецЕсли;
	Если ФайлСуществует(ИмяРесурсовЯзыка) Тогда
		УдалитьФайлы(ИмяРесурсовЯзыка);
	КонецЕсли;

	Писатель = Новый ЗаписьXML;
	Писатель.ОткрытьФайл(ИмяРесурсовЯзыка, "utf-8");
	Писатель.ЗаписатьОбъявлениеXML();
	Писатель.ЗаписатьТипДокумента("plist", "-//Apple//DTD PLIST 1.0//EN", "http://www.apple.com/DTDs/PropertyList-1.0.dtd", "");
	
	Писатель.ЗаписатьНачалоЭлемента("plist");
	Писатель.ЗаписатьАтрибут("version", XMLСтрока("1.0"));
	Писатель.ЗаписатьНачалоЭлемента("dict");
	ЗаписатьXML(Писатель, "CFBundleDisplayName", "key");
	ЗаписатьXML(Писатель, XMLСтрока(Представление), "string");
	Писатель.ЗаписатьКонецЭлемента(); // dict
	Писатель.ЗаписатьКонецЭлемента(); // plist
	Писатель.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ВыбратьФайлКонфигурации()
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выбор файла конфигурации мобильного приложения';en='Select mobile application configuration file'", "ru");
	ДиалогОткрытияФайла.Фильтр = НСтр("ru='Файлы конфигураций';en='Configuration files'", "ru") + " (*.xml)|*.xml";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Возврат ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
	Возврат "";

КонецФункции

// Функция получается из файла конфигурации в формате XML, сделанной для работы на устройстве,
// некоторую необходимую информацию (имя, версию и т.д.) и возвращает это в виде структуры.
&НаКлиенте
Функция ЗагрузитьДанныеКонфигурации(ПутьКФайлу)
	
	ЯзыкиКонфигурации = Новый Массив;
	СинонимыКонфигурации = Новый Массив;
	// Имя - имя конфигурации
	// Версия - номер версии из конфигурации
	// Наименования - представления конфигурации на языках конфигурации
	//	Наименования.Код - код языка представления
	//	Наименование.Представление - представление конфигурации на языке
	// ЯзыкПоУмолчанию - язык конфигурации по умолчанию
	// Языки - существующие языки конфигурации
	//	Языки.Код - код языка
	//	Языки.Имя - имя языка
	//	Языки.Представление - представление языка
	СвойстваКонфигурации = Новый Структура("Имя, Версия, Наименования, ЯзыкПоУмолчанию, Языки");
	ИмяКонфигурации = "";
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
		Если ЧтениеXML.Прочитать() Тогда
			// Имя конфигурации
			СвойстваКонфигурации.Имя = СокрЛП(ЧтениеXML.ПолучитьАтрибут("name"));
			// Версия конфигурации
			СвойстваКонфигурации.Версия = ЧтениеXML.ПолучитьАтрибут("version");
			// Язык по умолчанию для конфигурации
			СвойстваКонфигурации.ЯзыкПоУмолчанию = СтрЗаменить(ЧтениеXML.ПолучитьАтрибут("defaultLanguage"), "Language.", "");
		КонецЕсли;
		ЧтениеXML.Прочитать();
		Пока Истина Цикл
			Если ЧтениеXML.Имя = "language" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ЯзыкФайла = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
				ЯзыкКонфигурации = Новый Структура("Код, Имя, Представление");
				ЯзыкКонфигурации.Код = ЯзыкФайла.languageCode;
				ЯзыкКонфигурации.Имя = ЯзыкФайла.name;
				Если ТипЗнч(ЯзыкФайла.synonym.Item) = Тип("ОбъектXDTO") Тогда
					Если ЯзыкФайла.synonym.Item.lang = КодЛокализации Тогда
						Если ПустаяСтрока(ЯзыкФайла.synonym.item.content) Тогда
							ЯзыкКонфигурации.Представление = ЯзыкКонфигурации.Имя;
						Иначе
							ЯзыкКонфигурации.Представление = ЯзыкФайла.synonym.item.content;
						КонецЕсли;
					Иначе
						ЯзыкКонфигурации.Представление = ЯзыкКонфигурации.Имя;
					КонецЕсли;
					ЯзыкиКонфигурации.Добавить(ЯзыкКонфигурации);
				ИначеЕсли ТипЗнч(ЯзыкФайла.synonym.Item) = Тип("СписокXDTO") Тогда
					Для каждого СинонимЯзыка Из ЯзыкФайла.synonym.Item Цикл
						Если СинонимЯзыка.lang = КодЛокализации Тогда
							Если ПустаяСтрока(СинонимЯзыка.content) Тогда
								ЯзыкКонфигурации.Представление = ЯзыкКонфигурации.Имя;
							Иначе
								ЯзыкКонфигурации.Представление = СинонимЯзыка.content;
							КонецЕсли;
						Иначе
							Продолжить;
						КонецЕсли;
					КонецЦикла;
					ЯзыкКонфигурации.Представление = ЯзыкКонфигурации.Имя;
					ЯзыкиКонфигурации.Добавить(ЯзыкКонфигурации);
				КонецЕсли;
			ИначеЕсли  ЧтениеXML.Имя = "synonym" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				СписокСинонимов = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
				Если ТипЗнч(СписокСинонимов.Item) = Тип("ОбъектXDTO") Тогда
					// Один синоним
					СинонимКонфигурации = Новый Структура("Код, Представление");
					СинонимКонфигурации.Код = СписокСинонимов.Item.lang;
					СинонимКонфигурации.Представление = СписокСинонимов.Item.Content;
					СинонимыКонфигурации.Добавить(СинонимКонфигурации);
				ИначеЕсли ТипЗнч(СписокСинонимов.Item) = Тип("СписокXDTO") Тогда
					// Несколько синонимов
					Для каждого СинонимФайла Из СписокСинонимов.Item Цикл
						СинонимКонфигурации = Новый Структура("Код, Представление");
						СинонимКонфигурации.Код = СинонимФайла.lang;
						СинонимКонфигурации.Представление = СинонимФайла.Content;
						СинонимыКонфигурации.Добавить(СинонимКонфигурации);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Если ЧтениеXML.Прочитать() Тогда
					ЧтениеXML.Пропустить();
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Ошибка = ОписаниеОшибки();
		ВызватьИсключение НСтр("ru='Ошибка чтения файла конфигурации: ';en='Failed to read configuration file: '", "ru") + ПутьКФайлу + Символы.ПС + Ошибка;
	КонецПопытки;
	СвойстваКонфигурации.Языки = ЯзыкиКонфигурации;
	СвойстваКонфигурации.Наименования = СинонимыКонфигурации;
	Возврат СвойстваКонфигурации;
	
КонецФункции

// Добавляет в поставку новую конфигурацию
&НаКлиенте
Процедура ДобавитьКонфигурацию(ФайлКонфигурации)
	
	СвойстваКонфигурации = ЗагрузитьДанныеКонфигурации(ФайлКонфигурации);
	// проверим, что такая конфигурация еще не добавлялась в список
	Результат = Объект.Конфигурации.НайтиСтроки(Новый Структура("Путь", ФайлКонфигурации));
	Если Результат.Количество() Тогда
		ВызватьИсключение НСтр("ru='Данная конфигурация уже добавлена в список';en='This configuration is already in the list'", "ru");
		Возврат;
	КонецЕсли;
	// сформируем идентификатор приложения, если его еще не сформировали
	Если ПустаяСтрока(Объект.ИдентификаторПриложения) Тогда
		Объект.ИдентификаторПриложения = "com.e1c." + СвойстваКонфигурации.Имя;
	КонецЕсли;
	// Добавим языки конфигурации в список языков
	Для каждого Язык Из СвойстваКонфигурации.Языки Цикл
		Результат = ПредставленияПриложения.НайтиСтроки(Новый Структура("КодЯзыка", Язык.Код));
		Если Результат.Количество() = 0 Тогда
			// добавим язык
			Строка = ПредставленияПриложения.Добавить();
			Строка.КодЯзыка = Язык.Код;
			Строка.ИмяЯзыка = Язык.Имя;
			Строка.ПредставлениеЯзыка = Язык.Представление + " (" + Язык.Код + ")";
			Строка.Счетчик = 1;
		Иначе
			// увеличим счетчик
			Результат[0].Счетчик = Результат[0].Счетчик+1;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСписокВыбораЯзыкаПоУмолчанию();
    // добавим представления конфигурации
	ЛокальноеПредставление = "";
	Конфигурация = ПредставленияКонфгураций.Добавить();
	Конфигурация.Конфигурация = ФайлКонфигурации;
	Для каждого ПредставлениеПриложения Из СвойстваКонфигурации.Наименования Цикл
		Строка = Конфигурация.Представления.Добавить();
		Строка.КодЯзыка = ПредставлениеПриложения.Код;
		Строка.Представление = ПредставлениеПриложения.Представление;
	КонецЦикла;
	// теперь добавим саму конфигурацию
	Строка = Объект.Конфигурации.Добавить();
	Строка.Путь = ФайлКонфигурации;
	Строка.Наименование = ЛокальноеПредставление;
	Строка.Версия = Строка(СвойстваКонфигурации.Версия);
	
	Если Объект.Конфигурации.Количество() = 1 Тогда
		Для каждого ПредставлениеПриложения Из СвойстваКонфигурации.Наименования Цикл
			УстановитьПредставлениеПриложенияПоКодуЛокализации(ПредставлениеПриложения.Код, ПредставлениеПриложения.Представление);
		КонецЦикла;
		Путь = ФайлКонфигурации;
		Результат = ПредставленияПриложения.НайтиСтроки(Новый Структура("ИмяЯзыка", СвойстваКонфигурации.ЯзыкПоУмолчанию));
		Если Результат.Количество() <> 1 Тогда
			Объект.ЯзыкПоУмолчанию = КодЛокализации;
		Иначе
			Объект.ЯзыкПоУмолчанию = Результат[0].КодЯзыка;
		КонецЕсли;
		Объект.ПредставлениеПриложения = ПолучитьПредставлениеПриложенияПоКодуЛокализации(Объект.ЯзыкПоУмолчанию);
		Объект.ВерсияПриложения = СвойстваКонфигурации.Версия;
		ОднаКонфигурация = Истина;
	Иначе
		ОднаКонфигурация = Ложь;
	КонецЕсли;
	УстановитьПредставлениеКонфигурацийПоКодуЛокализации(Объект.ЯзыкПоУмолчанию);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Если имя файла настроек не указано - укажем его здесь
	Если ПустаяСтрока(КаталогОбработки) Тогда
		КаталогОбработки = КаталогДокументов() + "1C\";
	КонецЕсли;
	
	ФайлНастроек = КаталогОбработки + "MobileAppWizard.cfg";
	Если ФайлСуществует(ФайлНастроек) Тогда
		ПрочитатьНастройкиНаКлиенте(ФайлНастроек);
	Иначе
		// Если настроки не указаны - откроем форму настроек
		Если ПустаяСтрока(Объект.AndroidSDK) ИЛИ
			ПустаяСтрока(Объект.JavaSDK) ИЛИ
			ПустаяСтрока(Объект.ФайлКлюча) ИЛИ
			ПустаяСтрока(Объект.ПсевдонимКлюча) ИЛИ
			ПустаяСтрока(Объект.ПарольКлюча)
		Тогда
		    ТекущийФайлНастроек = ФайлНастроек;
			РедактироватьНастройки(Неопределено);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Результат = Вопрос(НСтр("ru='Настройки изменены. Сохранить настроки?';en='Settings have been changed. Do you want to save settings?'", "ru"), РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		Если Результат = КодВозвратаДиалога.Да Тогда
			ЗаписатьНастройкиНаКлиенте(ТекущийФайлНастроек);
		ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("AndroidSDK", Объект.AndroidSDK);
	ПараметрыФормы.Вставить("JavaSDK", Объект.JavaSDK);
	ПараметрыФормы.Вставить("ФайлКлюча", Объект.ФайлКлюча);
	ПараметрыФормы.Вставить("ПсевдонимКлюча", Объект.ПсевдонимКлюча);
	ПараметрыФормы.Вставить("ПарольКлюча", Объект.ПарольКлюча);
	ПараметрыФормы.Вставить("РезультатДляAndroid", Объект.РезультатДляAndroid);
	ПараметрыФормы.Вставить("РезультатДляiOS", Объект.РезультатДляiOS);
	ПараметрыФормы.Вставить("МобильнаяПлатформа", Объект.МобильнаяПлатформа);
	Результат = ОткрытьФормуМодально(МетаПуть + ".Форма.Настройки", ПараметрыФормы, ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.AndroidSDK = Результат.AndroidSDK;
		Объект.JavaSDK = Результат.JavaSDK;
		Объект.ФайлКлюча = Результат.ФайлКлюча;
		Объект.ПсевдонимКлюча = Результат.ПсевдонимКлюча;
		Объект.ПарольКлюча = Результат.ПарольКлюча;
		Объект.РезультатДляAndroid = Результат.РезультатДляAndroid;
		Объект.РезультатДляiOS = Результат.РезультатДляiOS;
		Объект.МобильнаяПлатформа = Результат.МобильнаяПлатформа;
		ЗаписатьНастройкиНаКлиенте(ТекущийФайлНастроек);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПоставку(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	// Для формирования поставки нужно наличие нескольких файлов
	// Для Андроид:
	// Android\prjandroid.zip
	// platform-tools\aapt.exe (Android SDK)
	// tools\apkbuilder.bat (Android SDK)
	// bin\jarsigner.exe (Java SDK)
	// Для iOS:
	// IOS\prjios.zip
	// bin\jar.exe (Java SDK)
	ТекстСообщения = НСтр("ru='Формирование файлов поставки для ОС Android';en='Generating distribution package files for Android OS...'", "ru");
	Состояние(ТекстСообщения, , НСтр("ru='Проверка возможности формирования...';en='Package generation check...'", "ru"));
	ЕстьОшибки = Ложь;
	Если Объект.СоздаватьДляAndroid Тогда
		Если ПустаяСтрока(Объект.МобильнаяПлатформа) Тогда
			// ищем в Моих документах
			ПлатформаАндроид = КаталогДокументов() + "1C\Android\prjandroid.zip";
		Иначе
			// ищем по заданному пути
			ПлатформаАндроид = Объект.МобильнаяПлатформа + "Android\prjandroid.zip";
		КонецЕсли;
		Если НЕ ФайлСуществует(ПлатформаАндроид) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Отсутствует файл с 1С:Предприятием для ОС Android (prjandroid.zip)';en='File containing 1C:Enterprise for Android OS (prjandroid.zip) not found'", "ru");
			Сообщение.Поле = "Объект.СоздаватьДляAndroid";
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;
		Ошибки = Неопределено;
		Данные = Новый Массив;
		Данные.Добавить(Новый Структура("Ключ, Значение, Реквизит", "Файл", Объект.AndroidSDK + "platform-tools\aapt.exe", "Объект.СоздаватьДляAndroid"));
		Данные.Добавить(Новый Структура("Ключ, Значение, Реквизит", "Файл", Объект.AndroidSDK + "tools\apkbuilder.bat", "Объект.СоздаватьДляAndroid"));
		Данные.Добавить(Новый Структура("Ключ, Значение, Реквизит", "Файл", Объект.JavaSDK + "bin\jarsigner.exe", "Объект.СоздаватьДляAndroid"));
		Данные.Добавить(Новый Структура("Ключ, Значение, Реквизит", "ПарольКлюча", Объект.ПарольКлюча, "Объект.СоздаватьДляAndroid"));
		Данные.Добавить(Новый Структура("Ключ, Значение, Реквизит", "ПсевдонимКлюча", Объект.ПсевдонимКлюча, "Объект.СоздаватьДляAndroid"));
		Данные.Добавить(Новый Структура("Ключ, Значение, Реквизит", "Файл", Объект.ФайлКлюча, "Объект.СоздаватьДляAndroid"));
		Результат = ПроверитьКорректностьРеквизитов(Данные, Ошибки);
		Если Результат Тогда
			Для каждого Ошибка Из Ошибки Цикл
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Ошибка.Текст;
				Сообщение.Поле = Ошибка.Реквизит;
				Сообщение.Сообщить();
			КонецЦикла;
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если ЕстьОшибки Тогда
			Предупреждение(НСтр("ru='Формирование файла поставки для ОС Android невозможно';en='Cannot generate distribution package file for Android OS'", "ru"));
		Иначе
			// Сформируем файл поставки для Андроид
			РабочийКаталог = ПолучитьИмяВременногоФайла("") + "\";
			СоздатьКаталог(РабочийКаталог);
			
			Состояние(ТекстСообщения, , НСтр("ru='Подготовка рабочих файлов...';en='Working files are being prepared...'", "ru"));
			ЧтениеZipФайла = новый ЧтениеZipФайла(ПлатформаАндроид);
			ЧтениеZipФайла.ИзвлечьВсе(РабочийКаталог);
			УдалитьФайлы(РабочийКаталог + "assets\templates" , "*.xml");
			УдалитьФайлы(РабочийКаталог + "assets\developer");
			СоздатьКаталог(РабочийКаталог + "assets\templates");
			Для Индекс=0 По Объект.Конфигурации.Количество()-1 Цикл
				КопироватьФайл(Объект.Конфигурации[Индекс].Путь, РабочийКаталог + "assets\templates\conf" + Формат(Индекс, "ЧГ=") + ".xml");
			КонецЦикла;
			
			Состояние(ТекстСообщения, , НСтр("ru='Установка картинок...';en='Setting the pictures...'", "ru"));
			СкопироватьКартинку(Объект.AndroidIcon36, РабочийКаталог + "res\drawable-ldpi\icon.png");
			СкопироватьКартинку(Объект.AndroidIcon48, РабочийКаталог + "res\drawable-mdpi\icon.png");
			СкопироватьКартинку(Объект.AndroidIcon72, РабочийКаталог + "res\drawable-hdpi\icon.png");
			СкопироватьКартинку(Объект.AndroidIcon96, РабочийКаталог + "res\drawable-xhdpi\icon.png");
			
			СкопироватьКартинку(Объект.AndroidLogo320, РабочийКаталог + "assets\logo\logo_320x480.png");
			СкопироватьКартинку(Объект.AndroidLogo480, РабочийКаталог + "assets\logo\logo_480x854.png");
			СкопироватьКартинку(Объект.AndroidLogo640, РабочийКаталог + "assets\logo\logo_640x960.png");
			СкопироватьКартинку(Объект.AndroidLogo768, РабочийКаталог + "assets\logo\logo_768x1024.png");
			СкопироватьКартинку(Объект.AndroidLogo800, РабочийКаталог + "assets\logo\logo_800x1280.png");
			СкопироватьКартинку(Объект.AndroidLogo1536, РабочийКаталог + "assets\logo\logo_1536x2048.png");
			СкопироватьКартинку(Объект.AndroidLogo854, РабочийКаталог + "assets\logo\logo_854x480.png");
			СкопироватьКартинку(Объект.AndroidLogo1024, РабочийКаталог + "assets\logo\logo_1024x768.png");
			СкопироватьКартинку(Объект.AndroidLogo1280, РабочийКаталог + "assets\logo\logo_1280x800.png");
			СкопироватьКартинку(Объект.AndroidLogo2048, РабочийКаталог + "assets\logo\logo_2048x1536.png");
			
			Состояние(ТекстСообщения, , НСтр("ru='Установка атрибутов приложения...';en='Setting the application attributes...'", "ru"));
			ЧтениеXML = новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(РабочийКаталог + "bin\AndroidManifest.xml");
			ПостроительDOM = Новый ПостроительDOM;
			ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
			ЧтениеXML = неопределено;
			ДокументDOM.ПервыйДочерний.Атрибуты.ПолучитьИменованныйЭлемент("package").ЗначениеУзла = XMLСтрока(Объект.ИдентификаторПриложения);
			ДокументDOM.ПервыйДочерний.Атрибуты.ПолучитьИменованныйЭлемент("http://schemas.android.com/apk/res/android","versionName").ЗначениеУзла = XMLСтрока(Объект.ВерсияПриложения);
			ДокументDOM.ПервыйДочерний.Атрибуты.ПолучитьИменованныйЭлемент("http://schemas.android.com/apk/res/android","versionCode").ЗначениеУзла = XMLСтрока(Объект.СборкаПриложения);
			Объект.СборкаПриложения = Объект.СборкаПриложения + 1; // Рекомендуеться увеличивать после выкладки
			
			Состояние(ТекстСообщения, , НСтр("ru='Установка локальных представлений приложения...';en='Setting local presentations for the application...'", "ru"));
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл(РабочийКаталог + "bin\AndroidManifest.xml");
			ЗаписьDOM = Новый ЗаписьDOM;
			ЗаписьDOM.Записать(ДокументDOM,ЗаписьXML);
			ЗаписьXML.Закрыть(); 	
			
			// зададим языки, если каталога нет - подставим туда дефолтный язык, только заменим представление
			УстановитьИмяАндроид(РабочийКаталог + "res\", "strings.xml", "default", ПолучитьПредставлениеПриложенияПоКодуЛокализации(Объект.ЯзыкПоУмолчанию));
			Если ПредставленияПриложения.Количество() > 1 Тогда
				Для каждого Представление Из ПредставленияПриложения Цикл
					Если НЕ ПустаяСтрока(Представление.Представление) Тогда
						УстановитьИмяАндроид(РабочийКаталог + "res\", "strings.xml", Представление.КодЯзыка, Представление.Представление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Состояние(ТекстСообщения, , НСтр("ru='Формирование .apk-файла...';en='Generating .apk-file...'", "ru"));
			ТекстовыйДокумент = новый ТекстовыйДокумент(); 
			ТекстовыйДокумент.ДобавитьСтроку(""""+Объект.AndroidSDK+"platform-tools\aapt.exe"" c -v -S """ + РабочийКаталог + "res"" -C """ + РабочийКаталог + "bin\res"" > """ + РабочийКаталог + "build.log""");
			ТекстовыйДокумент.ДобавитьСтроку(""""+Объект.AndroidSDK+"platform-tools\aapt.exe"" package --no-crunch -f -M """ + РабочийКаталог + "bin\AndroidManifest.xml"" -S """ + РабочийКаталог + "bin\res"" -S res -A """ + РабочийКаталог + "assets"" -I """ + Объект.AndroidSDK + "platforms\android-8\android.jar"" -F """ + РабочийКаталог + "bin\1cem.ap_"" --generate-dependencies >> """ + РабочийКаталог + "build.log""");
			ТекстовыйДокумент.ДобавитьСтроку("call """+Объект.AndroidSDK+"tools\apkbuilder.bat"" """ + РабочийКаталог + "test.apk"" -v -u -z """ + РабочийКаталог + "bin\1cem.ap_"" -f """ + РабочийКаталог + "bin\classes.dex"" -nf """ + РабочийКаталог + "libs"" >> """ + РабочийКаталог + "build.log""");
			ТекстовыйДокумент.ДобавитьСтроку(""""+Объект.JavaSDK+"bin\jarsigner.exe"" -keystore """ + Объект.ФайлКлюча + """ -storepass " + Объект.ПарольКлюча + " -keypass " + Объект.ПарольКлюча + " -signedjar test_signed.apk test.apk " + Объект.ПсевдонимКлюча + ">> """ + РабочийКаталог + "build.log""");
			//ТекстовыйДокумент.ДобавитьСтроку("pause");
			ТекстовыйДокумент.Записать(РабочийКаталог + "run.bat", КодировкаТекста.OEM);
			
			ЗапуститьПриложение(РабочийКаталог + "run.bat", РабочийКаталог, true);
			Если ПустаяСтрока(Объект.РезультатДляAndroid) Тогда
				ИмяСКаталогом = КаталогДокументов() + "1C\" + Объект.ИдентификаторПриложения;
				Каталог = КаталогДокументов() + "1C\";
			Иначе
				ИмяСКаталогом = Объект.РезультатДляAndroid + Объект.ИдентификаторПриложения;
				Каталог = Объект.РезультатДляAndroid;
			КонецЕсли;				
			КопироватьФайл(РабочийКаталог + "build.log", ИмяСКаталогом + ".log");
			КопироватьФайл(РабочийКаталог + "test_signed.apk", ИмяСКаталогом + ".apk");
			УдалитьФайлы(РабочийКаталог);
			Состояние(ТекстСообщения, , НСтр("ru='Успешное завершение';en='Successful completion'", "ru"));
			Сообщить(НСтр("ru='Формирование поставки для ОС Android завершено. Приложение и протокол формирования находится в каталоге: ';en='Distribution package for Android OS generation completed. The application and the genegation log are located in the directory: '", "ru") + Каталог);
		КонецЕсли; 
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Формирование файлов поставки для ОС iOS';en='Generating distribution package files for iOS...'", "ru");
	Состояние(ТекстСообщения, , НСтр("ru='Проверка возможности формирования...';en='Package generation check...'", "ru"));
	ЕстьОшибки = Ложь;
	Если Объект.СоздаватьДляiOS Тогда
		Если ПустаяСтрока(Объект.МобильнаяПлатформа) Тогда
			// ищем в Моих документах
			ПлатформаИОС = КаталогДокументов() + "1C\IOS\prjios.zip";
		Иначе
			// ищем по заданному пути
			ПлатформаИОС = Объект.МобильнаяПлатформа + "IOS\prjios.zip";
		КонецЕсли;
		Если НЕ ФайлСуществует(ПлатформаИОС) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Отсутствует файл с 1С:Предприятием для ОС iOS (prjios.zip)';en='File containing 1C:Enterprise for iOS (prjios.zip) not found'", "ru");
			Сообщение.Поле = "Объект.СоздаватьДляiOS";
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;
		Ошибки = Неопределено;
		Данные = Новый Массив;
		Данные.Добавить(Новый Структура("Ключ, Значение, Реквизит", "Файл", Объект.JavaSDK + "bin\jar.exe", "Объект.СоздаватьДляiOS"));
		Результат = ПроверитьКорректностьРеквизитов(Данные, Ошибки);
		Если Результат Тогда
			Для каждого Ошибка Из Ошибки Цикл
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = Ошибка.Текст;
				Сообщение.Поле = Ошибка.Реквизит;
				Сообщение.Сообщить();
			КонецЦикла;
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если ЕстьОшибки Тогда
			Предупреждение(НСтр("ru='Формирование файла поставки для ОС iOS невозможно';en='Cannot generate distribution package file for iOS'", "ru"));
		Иначе
			// Сформируем файл поставки для iOS
			РабочийКаталог = ПолучитьИмяВременногоФайла("") + "\";
			СоздатьКаталог(РабочийКаталог);
			Результат = Неопределено;
			
			Состояние(ТекстСообщения, , НСтр("ru='Подготовка рабочих файлов...';en='Working files are being prepared...'", "ru"));
			ВспомогательныйКаталог= РабочийКаталог + "1cem\";
			ПлатформаИОСрелиз = РабочийКаталог + "ios_release.zip";
			СоздатьКаталог(ВспомогательныйКаталог);
			//УдалитьФайлы(ВспомогательныйКаталог);
			УдалитьФайлы(ПлатформаИОСрелиз);
			КопироватьФайл(ПлатформаИОС, ПлатформаИОСрелиз);
			ЗапуститьПриложение("""" + Объект.JavaSDK + "bin\jar.exe"" xf """ + ПлатформаИОС + """ 1cem/Info.plist", РабочийКаталог, Истина, Результат);
			
			СоздатьКаталог(ВспомогательныйКаталог + "templates");
			Для Индекс=0 По Объект.Конфигурации.Количество()-1 Цикл
				КопироватьФайл(Объект.Конфигурации[Индекс].Путь , ВспомогательныйКаталог + "templates\conf" + Формат(Индекс,"ЧГ=") + ".xml" );
			КонецЦикла;
			
			Состояние(ТекстСообщения, , НСтр("ru='Установка картинок...';en='Setting the pictures...'", "ru"));
			СкопироватьКартинку(Объект.iOSLogo320, ВспомогательныйКаталог + "Default.png");
			СкопироватьКартинку(Объект.iOSLogo640, ВспомогательныйКаталог + "Default@2x.png");
			СкопироватьКартинку(Объект.iOSLogo768, ВспомогательныйКаталог + "Default-Portrait~ipad.png");
			СкопироватьКартинку(Объект.iOSLogo1024, ВспомогательныйКаталог + "Default-Landscape~ipad.png");
			СкопироватьКартинку(Объект.iOSLogo1536, ВспомогательныйКаталог + "Default-Portrait@2x~ipad.png");
			СкопироватьКартинку(Объект.iOSLogo2048, ВспомогательныйКаталог + "Default-Landscape@2x~ipad.png");
			
			СкопироватьКартинку(Объект.iOSIcon29, ВспомогательныйКаталог + "Icon-Small.png");
			СкопироватьКартинку(Объект.iOSIcon50, ВспомогательныйКаталог + "Icon-Small-50.png");
			СкопироватьКартинку(Объект.iOSIcon57, ВспомогательныйКаталог + "Icon.png");
			СкопироватьКартинку(Объект.iOSIcon58, ВспомогательныйКаталог + "Icon-Small@2x.png");
			СкопироватьКартинку(Объект.iOSIcon72, ВспомогательныйКаталог + "Icon-72.png");
			СкопироватьКартинку(Объект.iOSIcon100, ВспомогательныйКаталог + "Icon-Small-50@2x.png");
			СкопироватьКартинку(Объект.iOSIcon114, ВспомогательныйКаталог + "Icon@2x.png");
			СкопироватьКартинку(Объект.iOSIcon144, ВспомогательныйКаталог + "Icon-72@2x.png");
			
			Состояние(ТекстСообщения, , НСтр("ru='Установка локальных представлений приложения...';en='Setting local presentations for the application...'", "ru"));
			Если ПредставленияПриложения.Количество() > 1 Тогда
				Для каждого Представление Из ПредставленияПриложения Цикл
					Если НЕ ПустаяСтрока(Представление.Представление) Тогда
						УстановитьИмяИОС(ВспомогательныйКаталог, "InfoPlist.strings", Представление.КодЯзыка, Представление.Представление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Состояние(ТекстСообщения, , НСтр("ru='Установка атрибутов приложения...';en='Setting the application attributes...'", "ru"));
			ЧтениеXML = новый ЧтениеXML;
			ПараметрыЧтенияXML = Новый ПараметрыЧтенияXML( , , , , Ложь, Ложь, Ложь, Ложь); 
			ЧтениеXML.ОткрытьФайл(ВспомогательныйКаталог + "Info.plist", ПараметрыЧтенияXML);
			ПостроительDOM = Новый ПостроительDOM;
			ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
			ЧтениеXML = Неопределено;
			Элемент = ДокументDOM.ПоследнийДочерний.ПервыйДочерний.ПервыйДочерний;
			Пока Элемент <> Неопределено цикл
				Если Элемент.ИмяУзла = "key" тогда
					Если Элемент.ТекстовоеСодержимое = "CFBundleDisplayName" тогда
						Элемент = Элемент.СледующийСоседний;
						Элемент.ТекстовоеСодержимое = XMLСтрока(ПолучитьПредставлениеПриложенияПоКодуЛокализации(Объект.ЯзыкПоУмолчанию));
					КонецЕсли;
					Если Элемент.ТекстовоеСодержимое = "CFBundleIdentifier" тогда
						Элемент = Элемент.СледующийСоседний;
						Элемент.ТекстовоеСодержимое = XMLСтрока(Объект.ИдентификаторПриложения);
					КонецЕсли;
					Если Элемент.ТекстовоеСодержимое = "CFBundleVersion" тогда
						Элемент = Элемент.СледующийСоседний;
						Элемент.ТекстовоеСодержимое =  XMLСтрока(Объект.ВерсияПриложения);
					КонецЕсли;
					Если Элемент.ТекстовоеСодержимое = "CFBundleVersion" тогда
						Элемент = Элемент.СледующийСоседний;
						Элемент.ТекстовоеСодержимое =  XMLСтрока(Объект.ВерсияПриложения);
					КонецЕсли;
					Если Элемент.ТекстовоеСодержимое = "E1CDevelopmentMode" тогда
						Временный = Элемент;
						Элемент = Элемент.СледующийСоседний.СледующийСоседний;
						Элемент.РодительскийУзел.УдалитьДочерний(Временный.СледующийСоседний);
						Элемент.РодительскийУзел.УдалитьДочерний(Временный);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				Элемент = Элемент.СледующийСоседний;
			КонецЦикла;
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл(ВспомогательныйКаталог + "Info.plist");
			ЗаписьDOM = Новый ЗаписьDOM;
			ЗаписьDOM.Записать(ДокументDOM,ЗаписьXML);
			ЗаписьXML.Закрыть();
			Результат = Неопределено;
			Состояние(ТекстСообщения, , НСтр("ru='Формирование файла проекта...';en='Generating project file...'", "ru"));
			ЗапуститьПриложение("""" + Объект.JavaSDK+ "bin\jar.exe"" uf """ + ПлатформаИОСрелиз + """ 1cem/*", РабочийКаталог, Истина, Результат);
			Если ПустаяСтрока(Объект.РезультатДляiOS) Тогда
				ИмяСКаталогом = КаталогДокументов() + "1C\" + Объект.ИдентификаторПриложения;
				Каталог = КаталогДокументов() + "1C\";
			Иначе
				ИмяСКаталогом = Объект.РезультатДляiOS + Объект.ИдентификаторПриложения;
				Каталог = Объект.РезультатДляiOS;
			КонецЕсли;				
			КопироватьФайл(ПлатформаИОСрелиз, ИмяСКаталогом + ".zip");
			УдалитьФайлы(РабочийКаталог);
			Состояние(ТекстСообщения, , НСтр("ru='Успешное завершение';en='Successful completion'", "ru"));
			Сообщить(НСтр("ru='Формирование поставки для ОС iOS завершено. Архив проекта находится в каталоге: ';en='Distribution package for iOS generation completed. The application and the genegation log are located in the directory: '", "ru") + Каталог);
		КонецЕсли;
	КонецЕсли;
	ПодключитьОбработчикОжидания("ВернутьФокус", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьФокус()
	
	ОкнаПриложения = ПолучитьОкна();
	Для каждого ОкноПриложения Из ОкнаПриложения Цикл
		Если ОкноПриложения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекущаяФорма = ОкноПриложения.ПолучитьСодержимое();
		Если ТипЗнч(ТекущаяФорма) = Тип("УправляемаяФорма") Тогда
			Если ТекущаяФорма.Заголовок = Заголовок Тогда
				ОкноПриложения.Активизировать();
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройки(Команда)

	ЗаписатьНастройкиНаКлиенте(ТекущийФайлНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНастройки(Команда)
	
	Если Модифицированность Тогда
		Результат = Вопрос(НСтр("ru='Настройки изменены. Вы уверены в том, что хотите заново загрузить настройки?';en='Settings have been changed. Are you sure you want to reload settings?'", "ru"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ПрочитатьНастройкиНаКлиенте(ТекущийФайлНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьКартинки(Команда)
	
	// Подготовим массив структур с именами и значениями пиктограмм и логотипов
	AndroidИконки = ПолучитьСписокКартинок("AndroidIcon");
	AndroidЛоготипы = ПолучитьСписокКартинок("AndroidLogo");
	iOSИконки = ПолучитьСписокКартинок("iOSIcon");
	iOSЛоготипы = ПолучитьСписокКартинок("iOSLogo");
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("AndroidИконки", AndroidИконки);
	ПараметрыФормы.Вставить("AndroidЛоготипы", AndroidЛоготипы);
	ПараметрыФормы.Вставить("iOSИконки", iOSИконки);
	ПараметрыФормы.Вставить("iOSЛоготипы", iOSЛоготипы);
	Результат = ОткрытьФормуМодально(МетаПуть + ".Форма.ВыборКартинок", ПараметрыФормы);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		// присвоим значения обратно
		Для каждого ПутьККартинке Из Результат Цикл
			Объект[ПутьККартинке.Ключ] = ПутьККартинке.Значение;
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежим(Команда)
	
	Если ОднаКонфигурация Тогда
		ОднаКонфигурация = Ложь;
		Элементы.ВариантыПоставки.ТекущаяСтраница = Элементы.МногоКонфигураций;
	Иначе
		Если Объект.Конфигурации.Количество() > 1 Тогда
			Предупреждение(НСтр("ru='Выбрано более одной конфигурации. Вернуться в режим работы с одной конфигурацией невозможно';en='Multiple configurations were selected. Cannot switch into single-configuration mode.'", "ru"));
			Возврат;
		КонецЕсли;
		ОднаКонфигурация = Истина;
		Элементы.ВариантыПоставки.ТекущаяСтраница = Элементы.ОднаКонфигурация;
		Если Объект.Конфигурации.Количество() Тогда
			Путь = Объект.Конфигурации[0].Путь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФайлКонфигурации = ВыбратьФайлКонфигурации();
	Если ПустаяСтрока(ФайлКонфигурации) Тогда
		Возврат;
	КонецЕсли;
	Объект.Конфигурации.Очистить();
	ПредставленияКонфгураций.Очистить();
	ПредставленияПриложения.Очистить();
	ДобавитьКонфигурацию(ФайлКонфигурации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	ФайлКонфигурации = ВыбратьФайлКонфигурации();
	Если ПустаяСтрока(ФайлКонфигурации) Тогда
		Возврат;
	КонецЕсли;
	ДобавитьКонфигурацию(ФайлКонфигурации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередУдалением(Элемент, Отказ)

	ТекДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// удалим, если можно, языки данной конфигурации
	Результат = ПредставленияКонфгураций.НайтиСтроки(Новый Структура("Конфигурация", ТекДанные.Путь));
	Для каждого Представление Из Результат[0].Представления Цикл
		Результат2 = ПредставленияПриложения.НайтиСтроки(Новый Структура("КодЯзыка", Представление.КодЯзыка));
		Для каждого Язык Из Результат2 Цикл
			Если Язык.Счетчик-1 = 0 Тогда
				// данный язык можно удалить
				ПредставленияПриложения.Удалить(ПредставленияПриложения.Индекс(Язык));
			Иначе
				// такой язык еще упоминается
				Язык.Счетчик = Язык.Счетчик-1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// удалим саму конфигурацию
	ПредставленияКонфгураций.Удалить(ПредставленияКонфгураций.Индекс(Результат[0]));
	// перезаполним языки по умолчанию
	СтарыйЯзык = Объект.ЯзыкПоУмолчанию;
	ЗаполнитьСписокВыбораЯзыкаПоУмолчанию();
	СписокВыбора = Элементы.ЯзыкПоУмолчанию.СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(СтарыйЯзык) = Неопределено Тогда
		Если СписокВыбора.Количество() = 0 Тогда
			Объект.ЯзыкПоУмолчанию = КодЛокализации;
			Объект.ПредставлениеПриложения = "";
		Иначе
			Объект.ЯзыкПоУмолчанию = СписокВыбора[0].Значение;
			Объект.ПредставлениеПриложения = ПолучитьПредставлениеПриложенияПоКодуЛокализации(Объект.ЯзыкПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПослеУдаления(Элемент)

	// если конфигураций больше нет - очистим все сопутствующие поля
	Если Объект.Конфигурации.Количество() = 0 Тогда
		Объект.ВерсияПриложения = "";
		Объект.ИдентификаторПриложения = "";
		Объект.СборкаПриложения = 0;
		Путь = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияНаименованиеОткрытие(Элемент, СтандартнаяОбработка)

	ТекДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Конфигурации = ПредставленияКонфгураций.НайтиСтроки(Новый Структура("Конфигурация", ТекДанные.Путь));
	Представления = Новый Массив;
	Для каждого ПредставлениеПриложения Из Конфигурации[0].Представления Цикл
		Параметр = Новый Структура("КодЯзыка, ПредставлениеЯзыка, Представление");
		Параметр.КодЯзыка = ПредставлениеПриложения.КодЯзыка;
		Параметр.Представление = ПредставлениеПриложения.Представление;
		Результат = ПредставленияПриложения.НайтиСтроки(Новый Структура("КодЯзыка", Параметр.КодЯзыка));
		Параметр.ПредставлениеЯзыка = Результат[0].ПредставлениеЯзыка;
		Представления.Добавить(Параметр);
	КонецЦикла;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокПредставлений", Представления);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
	ОткрытьФормуМодально(МетаПуть + ".Форма.РедакторПредставления", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выбор файла настроек';en='Select settings file'", "ru");
	ДиалогОткрытияФайла.Фильтр = НСтр("ru='Файлы настроек';en='Settings files'", "ru") + " (*.cfg)|*.cfg|" + НСтр("ru='XML-файлы';en='XML-files'", "ru") + " (*.xml)|*.xml";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПрочитатьНастройкиНаКлиенте(ДиалогОткрытияФайла.ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройкиСДругимИменем(Команда)
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.Заголовок = НСтр("ru='Сохранение файла настроек с другим именем';en='Save settings file with specified name'", "ru");
	ДиалогСохраненияФайла.Фильтр = НСтр("ru='Файлы настроек';en='Settings files'", "ru") + " (*.cfg)|*.cfg|" + НСтр("ru='XML-файлы';en='XML-files'", "ru") + " (*.xml)|*.xml";
	Если ДиалогСохраненияФайла.Выбрать() Тогда
		ТекущийФайлНастроек = ДиалогСохраненияФайла.ПолноеИмяФайла;
		ЗаписатьНастройкиНаКлиенте(ТекущийФайлНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПриложенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПредставленияПриложения.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Не выбрано ни одной конфигурации. Редактирование невозможно.';en='No configuration selected. Parameter cannot be set.'", "ru"));
		Возврат;
	КонецЕсли;
	Представления = Новый Массив;
	Для каждого ПредставлениеПриложения Из ПредставленияПриложения Цикл
		Параметр = Новый Структура("КодЯзыка, ПредставлениеЯзыка, Представление");
		Параметр.КодЯзыка = ПредставлениеПриложения.КодЯзыка;
		Параметр.ПредставлениеЯзыка = ПредставлениеПриложения.ПредставлениеЯзыка;
		Параметр.Представление = ПредставлениеПриложения.Представление;
		Представления.Добавить(Параметр);
	КонецЦикла;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокПредставлений", Представления);
	Результат = ОткрытьФормуМодально(МетаПуть + ".Форма.РедакторПредставления", ПараметрыФормы);
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Для каждого Представление Из Результат Цикл
			УстановитьПредставлениеПриложенияПоКодуЛокализации(Представление.КодЯзыка, Представление.Представление);
		КонецЦикла;
		Объект.ПредставлениеПриложения = ПолучитьПредставлениеПриложенияПоКодуЛокализации(КодЛокализации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЯзыкПоУмолчаниюПриИзменении(Элемент)
	
	Объект.ПредставлениеПриложения = ПолучитьПредставлениеПриложенияПоКодуЛокализации(Объект.ЯзыкПоУмолчанию);
	УстановитьПредставлениеКонфигурацийПоКодуЛокализации(Объект.ЯзыкПоУмолчанию);
	
КонецПроцедуры
